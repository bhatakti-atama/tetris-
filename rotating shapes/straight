
void straight()
{
  orientation = 0;
  baseX = 2;
  baseY = 4;
  condition = 1;
  tfs = 0;
  while (condition == 1)
  {
    if (orientation == 0)
    {
      for (int i = 0; i < 4; i++)
      {
        x[i] = baseX + i;
        y[i] = baseY;
        tetris[y[i]][x[i]] = 1;
      }
      scan();
      if (y[3] < 17 && (tetris[y[0] + 1][x[0]] == 0) && (tetris[y[1] + 1][x[1]] == 0) && (tetris[y[2] + 1][x[2]] == 0) && (tetris[y[3] + 1][x[3]]) == 0)
      {
        if (tfs == 0)
        {
          timeInitial = millis();
          timeFinal = timeInitial;
        }
        else
        {
          tfs = 0;
        }
        while (timeFinal - timeInitial < 500 && orientation == 0)
        {
          timeFinal = millis();
          if (baseX > 0 && b1Input() == 1 && tetris[baseY][baseX - 1] == 0)
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX - 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX + i;
              y[i] = baseY;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
          if (baseX < 5 && b2Input() == 1 && tetris[baseY][baseX + 4 ] == 0 )
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX + 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX + i;
              y[i] = baseY;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
          if (baseY > 3 && tetris[baseY - 1][baseX] == 0 && tetris[baseY - 2][baseX] == 0 && tetris[baseY - 3][baseX] == 0 && b3Input() == 1 )
          {
            orientation = 1;
            tfs = 1;
            for (int i = 0; i < 4; i++ )
            {
              tetris[y[i]][x[i]] = 0;
            }
          }
        }
        if ( tfs == 0)
        {
          for ( int i = 0 ; i < 4 ; i++)
          {
            tetris[y[i]][x[i]] = 0;
          }
          baseY = baseY + 1;
          for ( int i = 0 ; i < 4 ; i++)
          {
            x[i] = baseX + i;
            y[i] = baseY;
            tetris[y[i]][x[i]] = 1;
          }
        }
      }
      else
      {
        if (tfs == 0)
        {
          timeInitial = millis();
          timeFinal = timeInitial;
        }
        else
        {
          tfs = 0;
        }
        while (timeFinal - timeInitial < 500 && orientation == 1)
        {
          timeFinal = millis();
          if (baseX > 0 && b1Input() == 1 && tetris[baseY][baseX - 1])
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX - 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX + i;
              y[i] = baseY;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
          if (baseX < 5 && b2Input() == 1 && tetris[baseY][baseX + 4 ] == 0 )
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX + 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX + i;
              y[i] = baseY;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
        }
        if (y[3] < 17 && (tetris[y[0] + 1][x[0]] == 0) && (tetris[y[1] + 1][x[1]] == 0) && (tetris[y[2] + 1][x[2]] == 0) && (tetris[y[3] + 1][x[3]]) == 0)
        {
          condition = 1;
        }
        else
        {
          condition = 0 ;
        }
      }
    }
    if (orientation == 1)
    {
      for (int i = 0; i < 4; i++)
      {
        x[i] = baseX;
        y[i] = baseY - i ;
        tetris[y[i]][x[i]] = 1;
      }
      scan();
      if (y[3] < 17 && (tetris[y[0] + 1][x[0]]) == 0)
      {
        if (tfs == 0)
        {
          timeInitial = millis();
          timeFinal = timeInitial;
        }
        else
        {
          tfs = 0;
        }
        while (timeFinal - timeInitial < 500 && orientation == 1)
        {
          timeFinal = millis();
          if (baseX > 0 && b1Input() == 1 && tetris[baseY][baseX - 1] == 0 && tetris[baseY - 1][baseX - 1] == 0 && tetris[baseY - 2][baseX - 1] == 0 && tetris[baseY - 3][baseX - 1] == 0)
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX - 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX;
              y[i] = baseY - i;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
          if (baseX < 8 && b2Input() == 1 && tetris[baseY][baseX + 1 ] == 0 && tetris[baseY - 1][baseX + 1 ] == 0 && tetris[baseY - 2][baseX + 1 ] == 0 && tetris[baseY - 3][baseX + 1 ] == 0)
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX + 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX ;
              y[i] = baseY - i ;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
          if (baseX < 6 && tetris[baseY][baseX + 1] == 0 && tetris[baseY][baseX + 2] == 0 && tetris[baseY][baseX + 3] == 0 && b3Input() == 1 )
          {
            orientation = 0;
            tfs = 1;
            for (int i = 0; i < 4; i++ )
            {
              tetris[y[i]][x[i]] = 0;
            }
          }
        }
        if ( tfs == 0)
        {
          for ( int i = 0 ; i < 4 ; i++)
          {
            tetris[y[i]][x[i]] = 0;
          }
          baseY = baseY + 1;
          for ( int i = 0 ; i < 4 ; i++)
          {
            x[i] = baseX ;
            y[i] = baseY - i;
            tetris[y[i]][x[i]] = 1;
          }
        }
      }
      else
      {
        while (timeFinal - timeInitial < 500 && orientation == 1)
        {
          timeFinal = millis();
          if (baseX > 0 && b1Input() == 1 && tetris[baseY][baseX - 1] == 0 && tetris[baseY - 1][baseX - 1] == 0 && tetris[baseY - 2][baseX - 1] == 0 && tetris[baseY - 3][baseX - 1] == 0)
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX - 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX;
              y[i] = baseY - i;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
          if (baseX < 8 && b2Input() == 1 && tetris[baseY][baseX + 1 ] == 0 && tetris[baseY - 1][baseX + 1 ] == 0 && tetris[baseY - 2][baseX + 1 ] == 0 && tetris[baseY - 3][baseX + 1 ] == 0)
          {
            for ( int i = 0; i < 4; i++)
            {
              tetris[y[i]][x[i]] = 0;
            }
            baseX = baseX + 1;
            for (int i = 0; i < 4; i++)
            {
              x[i] = baseX ;
              y[i] = baseY - i ;
              tetris[y[i]][x[i]] = 1;
            }
            scan();
          }
        }

        if (y[3] < 17 && (tetris[y[0] + 1][x[0]]) == 0)
        {
          condition = 1;
        }
        else
        {
          condition = 0 ;
        }
      }
    }
  }
}
